import java.io.*;
import java.util.*;

// 560ms, 누적합, map 
public class Main_백준_2143_두배열의합 {
	public static void main(String[] args) throws Exception {
		
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        int T = Integer.parseInt(br.readLine());
        int n = Integer.parseInt(br.readLine());
        
        int[] prefixSumA = new int[n + 1];
        st = new StringTokenizer(br.readLine());
        for (int i = 1; i <= n; i++) {
            prefixSumA[i] = prefixSumA[i - 1] + Integer.parseInt(st.nextToken());
        }
        
        int m = Integer.parseInt(br.readLine());
        int[] prefixSumB = new int[m + 1];
        st = new StringTokenizer(br.readLine());
        for (int i = 1; i <= m; i++) {
        	prefixSumB[i] = prefixSumB[i - 1] + Integer.parseInt(st.nextToken());
        }
        
        HashMap<Integer, Long> Asum = new HashMap<>();
        HashMap<Integer, Long> Bsum = new HashMap<>();

        // 부배열의 합 계산
        for (int i = 1; i <= n; i++) {
            for (int j = i; j <= n; j++) {
                int sum = prefixSumA[j] - prefixSumA[i - 1];
                Asum.put(sum, Asum.getOrDefault(sum, (long)0) + 1);
            }
        }
        // 부배열의 합 계산
        for (int i = 1; i <= m; i++) {
            for (int j = i; j <= m; j++) {
                int sum = prefixSumB[j] - prefixSumB[i - 1];
                Bsum.put(sum, Bsum.getOrDefault(sum, (long)0) + 1);
            }
        }
        
        long answer = 0;
        for (Map.Entry<Integer, Long> e : Asum.entrySet()) {
        	int k = e.getKey();
			if (Bsum.containsKey(T - k)) {
				answer += e.getValue() * Bsum.get(T - k);
			}
		}
        
        System.out.println(answer);
	}
}